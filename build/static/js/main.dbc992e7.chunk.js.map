{"version":3,"sources":["Product/product.jpg","Product/Product.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","product","props","className","alt","src","img","style","width","height","name","price","onClick","minusclick","value","stock","addclick","rmvclick","Math","round","inventory","App","useState","products","id","productsState","setProductsState","map","index","key","productIndex","productId","findIndex","p","addStockHandler","minusStockHandler","splice","removeHandler","total","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dbc992e7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/product.03b10ca8.jpg\";","import React from 'react';\r\nimport './Product.css'\r\nimport img from './product.jpg'\r\nconst product =(props) => {\r\nreturn (\r\n<tr>\r\n<th className=\"col-4\"><img alt=\"product\" src = {img} style={{width: \"100px\", height : \"100px\"}} ></img> {props.name}</th>\r\n<th>${props.price}</th>\r\n<th><button className=\"btn btn-primary\" onClick = {props.minusclick}>-</button></th>\r\n<th><input value= {props.stock} /></th>\r\n<th><button className=\"btn btn-primary\" onClick = {props.addclick}>+</button></th>\r\n<th><button className=\"btn btn-danger\" onClick = {props.rmvclick}>remove</button></th>\r\n<th>${Math.round(props.price*props.stock*100)/100}</th>\r\n<th>{props.inventory - props.stock}</th>\r\n</tr>\r\n)\r\n}\r\n\r\nexport default product\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Product from './Product/Product'\nimport './bootstrap.css'\nconst App = props => {\n  const [productsState, setProductsState] = useState({\n    products:[\n      {id: 1, name:'product1',stock:1,inventory:10,price:3.99},\n      {id: 2, name:'product2',stock:2,inventory:20,price:4.99},\n      {id: 3, name:'product3',stock:0,inventory:100,price:9.99},\n      {id: 4, name:'product4', stock:2,inventory:1000,price:99.99}\n    ]\n  });\n\n  const removeHandler = (index) => {\n    const products = [...productsState.products]\n    products.splice(index,1)\n    setProductsState({\n      products:products\n    })\n    }\n\n  const addStockHandler = (productIndex) => {\n   const productId = productsState.products.findIndex(p => p.id === productIndex )\n   const product = {...productsState.products[productId]}\n   if(product.inventory-product.stock>0)\n   product.stock += 1\n   const products = [...productsState.products]\n   products[productId] = product\n   setProductsState({\n   products:products\n   }); \n};\n\nconst total = () => {\n  const products = [...productsState.products]\n  let total = 0\n  for(const product of products){\n    total += product.stock*product.price\n  }\n  return Math.round(total*100)/100\n}\n\nconst minusStockHandler = (productIndex) => {\n  const productId = productsState.products.findIndex(p => p.id === productIndex )\n  const product = {...productsState.products[productId]}\n  if(product.stock>0)\n  product.stock -= 1\n  const products = [...productsState.products]\n  products[productId] = product\n  setProductsState({\n  products:products\n  }); \n};\n\n    return(\n      <div>\n    <table className=\"table\">\n      \n        <thead>\n          <tr>\n            <th className=\"col-4\">Name</th>\n            <th>Price</th>\n            <th>+</th>\n            <th>Quantity</th>\n            <th>-</th>\n            <th></th>\n            <th>Subtotal</th>\n            <th>Remaining</th>\n          </tr>\n        </thead>\n        <tbody>\n    {productsState.products.map((product,index) => {\n      return <Product \n      key = {product.id}\n      name = {product.name} \n      stock={product.stock}\n      price={product.price}\n      inventory = {product.inventory}\n      addclick={() => addStockHandler(product.id)}\n      minusclick={() => minusStockHandler(product.id)}\n      rmvclick={() => removeHandler(index)}\n      />\n    })}\n    </tbody>\n    </table>\n  <p>Total:{total()}</p>\n    <button className = \"btn btn-warning\">Continue Shopping</button>\n    <button className = \"btn btn-success\">Checkout</button>\n    </div>\n    )\n  \n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}